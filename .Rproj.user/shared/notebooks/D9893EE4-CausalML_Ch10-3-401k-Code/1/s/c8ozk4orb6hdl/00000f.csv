"0","dml2_for_irm <- function(x, d, y, dreg, yreg0, yreg1, trimming = 0.01, nfold = 5, method = ""regression"") {"
"0","  yhat0 <- rep(0, length(y))"
"0","  yhat1 <- rep(0, length(y))"
"0","  Dhat <- rep(0, length(d))"
"0",""
"0","  nobs <- nrow(x) # number of observations"
"0","  foldid <- rep.int(1:nfold, times = ceiling(nobs / nfold))[sample.int(nobs)] # define folds indices"
"0","  I <- split(1:nobs, foldid) # split observation indices into folds"
"0","  ytil <- dtil <- rep(NA, nobs)"
"0",""
"0","  cat(""fold: "")"
"0","  for (b in seq_along(I)) {"
"0","    # define helpful variables"
"0","    Dnotb <- d[-I[[b]]]"
"0","    Xb <- X[I[[b]], ]"
"0","    Xnotb <- X[-I[[b]], ]"
"0",""
"0","    # training dfs subsetted on the -I[[b]] fold"
"0","    XD0 <- X[-I[[b]], ][d[-I[[b]]] == 0]"
"0","    yD0 <- y[-I[[b]]][d[-I[[b]]] == 0]"
"0","    XD1 <- X[-I[[b]], ][d[-I[[b]]] == 1]"
"0","    yD1 <- y[-I[[b]]][d[-I[[b]]] == 1]"
"0",""
"0","    if (method == ""regression"") {"
"0","      yfit0 <- yreg0(as.matrix(XD0), yD0)"
"0","      yfit1 <- yreg1(as.matrix(XD1), yD1)"
"0","      yhat0[I[[b]]] <- predict(yfit0, as.matrix(Xb)) # default is type = ""response"" for glmnet family gaussian"
"0","      yhat1[I[[b]]] <- predict(yfit1, as.matrix(Xb))"
"0","    } else if (method == ""randomforest"") {"
"0","      yfit0 <- yreg0(XD0, yD0)"
"0","      yfit1 <- yreg1(XD1, yD1)"
"0","      yhat0[I[[b]]] <- predict(yfit0, Xb) # default is type = ""response"" for rf"
"0","      yhat1[I[[b]]] <- predict(yfit1, Xb)"
"0","    } else if (method == ""decisiontrees"") {"
"0","      yfit0 <- yreg0(XD0, yD0)"
"0","      yfit1 <- yreg1(XD1, yD1)"
"0","      yhat0[I[[b]]] <- predict(yfit0, Xb) # default is type = ""vector"" for decision"
"0","      yhat1[I[[b]]] <- predict(yfit1, Xb)"
"0","    } else if (method == ""boostedtrees"") {"
"0","      yfit0 <- yreg0(as.data.frame(XD0), yD0)"
"0","      yfit1 <- yreg1(as.data.frame(XD1), yD1)"
"0","      yhat0[I[[b]]] <- predict(yfit0, Xb) # default is type = ""response"" for boosted"
"0","      yhat1[I[[b]]] <- predict(yfit1, Xb)"
"0","    }"
"0",""
"0","    # propensity scores:"
"0","    if (method == ""regression"") {"
"0","      dfit_b <- dreg(as.matrix(Xnotb), Dnotb)"
"0","      dhat_b <- predict(dfit_b, as.matrix(Xb), type = ""response"") # default is type=""link"" for family binomial!"
"0","    } else if (method == ""randomforest"") {"
"0","      dfit_b <- dreg(Xnotb, as.factor(Dnotb))"
"0","      dhat_b <- predict(dfit_b, Xb, type = ""prob"")[, 2]"
"0","    } else if (method == ""decisiontrees"") {"
"0","      dfit_b <- dreg(Xnotb, Dnotb)"
"0","      dhat_b <- predict(dfit_b, Xb)[, 2]"
"0","    } else if (method == ""boostedtrees"") {"
"0","      dfit_b <- dreg(as.data.frame(Xnotb), Dnotb)"
"0","      dhat_b <- predict(dfit_b, Xb, type = ""response"")"
"0","    }"
"0","    dhat_b <- pmax(pmin(dhat_b, 1 - trimming), trimming) # trimming so scores are between [trimming, (1-trimming)]"
"0","    Dhat[I[[b]]] <- dhat_b"
"0",""
"0","    cat(b, "" "")"
"0","  }"
"0",""
"0","  # Prediction of treatment and outcome for observed instrument"
"0","  yhat <- yhat0 * (1 - D) + yhat1 * D"
"0","  # residuals"
"0","  ytil <- y - yhat"
"0","  dtil <- D - Dhat"
"0","  # doubly robust quantity for every sample"
"0","  drhat <- yhat1 - yhat0 + (y - yhat) * (D / Dhat - (1 - D) / (1 - Dhat))"
"0","  coef_est <- mean(drhat)"
"0","  vari <- var(drhat)"
"0","  se <- sqrt(vari / nrow(X))"
"0","  cat(""point"", coef_est)"
"0","  cat(""se"", se)"
"0","  return(list(coef_est = coef_est, se = se, ytil = ytil, dtil = dtil, drhat = drhat,"
"0","              yhat0 = yhat0, yhat1 = yhat1, dhat = Dhat, yhat = yhat))"
"0","}"
"0",""
"0","summaryIRM <- function(coef_est, se, ytil, dtil, drhat, name) {"
"0","  summary_data <- data.frame("
"0","    estimate = coef_est, # point estimate"
"0","    se = se, # standard error"
"0","    lower = coef_est - 1.96 * se, # lower end of 95% confidence interval"
"0","    upper = coef_est + 1.96 * se, # upper end of 95% confidence interval"
"0","    rmse_y = sqrt(mean(ytil^2)), # res of model that predicts outcome y"
"0","    rmse_D = sqrt(mean(dtil^2)), # res of model that predicts treatment D"
"0","    accuracy_D = mean(abs(dtil) < 0.5) # binary classification accuracy of model for D"
"0","  )"
"0","  row.names(summary_data) <- name"
"0","  return(summary_data)"
"0","}"
