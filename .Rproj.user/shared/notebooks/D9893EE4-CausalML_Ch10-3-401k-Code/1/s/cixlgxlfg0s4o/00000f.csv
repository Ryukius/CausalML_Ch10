"0","dml2_for_plm <- function(x, d, y, dreg, yreg, nfold = 3, method = ""regression"") {"
"0","  nobs <- nrow(x) # number of observations"
"0","  foldid <- rep.int(1:nfold, times = ceiling(nobs / nfold))[sample.int(nobs)] # define folds indices"
"0","  I <- split(1:nobs, foldid) # split observation indices into folds"
"0","  ytil <- dtil <- rep(NA, nobs)"
"0","  cat(""fold: "")"
"0","  for (b in seq_along(I)) {"
"0","    if (method == ""regression"") {"
"0","      dfit <- dreg(x[-I[[b]], ], d[-I[[b]]]) # take a fold out"
"0","      yfit <- yreg(x[-I[[b]], ], y[-I[[b]]]) # take a foldt out"
"0","      dhat <- predict(dfit, x[I[[b]], ], type = ""response"") # predict the left-out fold"
"0","      yhat <- predict(yfit, x[I[[b]], ], type = ""response"") # predict the left-out fold"
"0","      dtil[I[[b]]] <- (d[I[[b]]] - dhat) # record residual for the left-out fold"
"0","      ytil[I[[b]]] <- (y[I[[b]]] - yhat) # record residial for the left-out fold"
"0","    } else if (method == ""randomforest"") {"
"0","      dfit <- dreg(x[-I[[b]], ], as.factor(d)[-I[[b]]]) # take a fold out"
"0","      yfit <- yreg(x[-I[[b]], ], y[-I[[b]]]) # take a fold out"
"0","      dhat <- predict(dfit, x[I[[b]], ], type = ""prob"")[, 2] # predict the left-out fold"
"0","      yhat <- predict(yfit, x[I[[b]], ], type = ""response"") # predict the left-out fold"
"0","      dtil[I[[b]]] <- (d[I[[b]]] - dhat) # record residual for the left-out fold"
"0","      ytil[I[[b]]] <- (y[I[[b]]] - yhat) # record residial for the left-out fold"
"0","    } else if (method == ""decisiontrees"") {"
"0","      dfit <- dreg(x[-I[[b]], ], as.factor(d)[-I[[b]]]) # take a fold out"
"0","      yfit <- yreg(x[-I[[b]], ], y[-I[[b]]]) # take a fold out"
"0","      dhat <- predict(dfit, x[I[[b]], ])[, 2] # predict the left-out fold"
"0","      yhat <- predict(yfit, x[I[[b]], ]) # predict the left-out fold"
"0","      dtil[I[[b]]] <- (d[I[[b]]] - dhat) # record residual for the left-out fold"
"0","      ytil[I[[b]]] <- (y[I[[b]]] - yhat) # record residial for the left-out fold"
"0","    } else if (method == ""boostedtrees"") {"
"0","      dfit <- dreg(x[-I[[b]], ], d[-I[[b]]]) # take a fold out"
"0","      yfit <- yreg(x[-I[[b]], ], y[-I[[b]]]) # take a fold out"
"0","      dhat <- predict(dfit, x[I[[b]], ], type = ""response"") # predict the left-out fold"
"0","      yhat <- predict(yfit, x[I[[b]], ], type = ""response"") # predict the left-out fold"
"0","      dtil[I[[b]]] <- (d[I[[b]]] - dhat) # record residual for the left-out fold"
"0","      ytil[I[[b]]] <- (y[I[[b]]] - yhat) # record residial for the left-out fold"
"0","    }"
"0","    cat(b, "" "")"
"0","  }"
"0","  rfit <- lm(ytil ~ dtil) # estimate the main parameter by regressing one residual on the other"
"0","  coef_est <- coef(rfit)[2] # extract coefficient"
"0","  se <- sqrt(vcovHC(rfit)[2, 2]) # record robust standard error"
"0","  cat(sprintf(""\ncoef (se) = %g (%g)\n"", coef_est, se)) # printing output"
"0","  return(list(coef_est = coef_est, se = se, dtil = dtil, ytil = ytil)) # save output and residuals"
"0","}"
